import inspect
import re
from typing import Callable, Dict, Optional
from pathlib import Path
from dash import Dash, clientside_callback
from .utils import SingletonMeta


def relative_path(file_path):
    return str(Path(__file__).parent / file_path)


def read_template():
    path = relative_path("./template.html")
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()
    return content


class Pyodide(Dash):
    def __init__(
        self,
        name=None,
        server=True,
        assets_folder="assets",
        pages_folder="pages",
        use_pages=None,
        assets_url_path="assets",
        # assets_ignore="",
        assets_external_path=None,
        eager_loading=False,
        include_assets_files=True,
        include_pages_meta=True,
        url_base_pathname=None,
        requests_pathname_prefix=None,
        routes_pathname_prefix=None,
        serve_locally=True,
        compress=None,
        meta_tags=None,
        # index_string=...,
        external_scripts=None,
        external_stylesheets=None,
        suppress_callback_exceptions=None,
        prevent_initial_callbacks=False,
        show_undo_redo=False,
        extra_hot_reload_paths=None,
        plugins=None,
        title="Dash",
        update_title="Updating...",
        long_callback_manager=None,
        background_callback_manager=None,
        add_log_handler=True,
        **obsolete,
    ):
        super().__init__(
            name=name,
            server=server,
            assets_folder=assets_folder,
            pages_folder=pages_folder,
            use_pages=use_pages,
            assets_url_path=assets_url_path,
            assets_ignore=".*pyodide.*",
            assets_external_path=assets_external_path,
            eager_loading=eager_loading,
            include_assets_files=include_assets_files,
            include_pages_meta=include_pages_meta,
            url_base_pathname=url_base_pathname,
            requests_pathname_prefix=requests_pathname_prefix,
            routes_pathname_prefix=routes_pathname_prefix,
            serve_locally=serve_locally,
            compress=compress,
            meta_tags=meta_tags,
            external_scripts=external_scripts,
            external_stylesheets=external_stylesheets,
            suppress_callback_exceptions=suppress_callback_exceptions,
            prevent_initial_callbacks=prevent_initial_callbacks,
            show_undo_redo=show_undo_redo,
            extra_hot_reload_paths=extra_hot_reload_paths,
            plugins=plugins,
            title=title,
            update_title=update_title,
            long_callback_manager=long_callback_manager,
            background_callback_manager=background_callback_manager,
            add_log_handler=add_log_handler,
            index_string=read_template(),
            **obsolete,
        )


class PythonClientSideCallbacks(Dict[str, str], metaclass=SingletonMeta):
    def __init__(self):
        self._script_path = relative_path("../assets/script.py")
        super().__init__({})
        with open(self._script_path, mode="w") as f:
            f.write("# Autogenerated file, do not write.\n\n")

    def register(self, func: Callable):
        function_name = func.__name__
        if function_name is self:
            raise KeyError(f"{function_name} is already registered.")
        function_code = inspect.getsource(func)
        # match = re.match(r'(?:@.*\(.*?\)\n)(def.*)', function_code, flags=re.DOTALL)
        match = re.match(r"(?:.*?)(def.*)", function_code, flags=re.DOTALL)
        self[function_name] = match.group(1)
        with open(self._script_path, mode="a") as f:
            f.write(self[function_name])
            f.write("\n")


def clientside_python_callback(*args, **kwargs):
    def wrapper(func):
        callbacks = PythonClientSideCallbacks()
        callbacks.register(func)
        js_code = f"""
        async function(...args) {{
            const result = await asyncRunFunction('{func.__name__}', args);
            return result.results
        }}"""
        clientside_callback(js_code, *args, **kwargs)

        return func

    return wrapper
